document.addEventListener('DOMContentLoaded', () => {
    firebase.auth().onAuthStateChanged(async (user) => {
        if (user) {
            const ADMIN_EMAIL = "vini@eklesia.com";
            const loggedInUserEmail = user.email;
            const loggedInUserId = user.uid;
            const isAdmin = loggedInUserEmail === ADMIN_EMAIL;
            const sheetUserId = isAdmin ? sessionStorage.getItem('sheetToEdit') : loggedInUserId;

            if (isAdmin && !sessionStorage.getItem('sheetToEdit')) {
                window.location.href = './dashboard.html';
                return;
            }

            const db = firebase.firestore();

            // NOVA LÓGICA DE PRESENÇA COM REALTIME DATABASE
            const setupRealtimePresence = (userId) => {
                const rtdb = firebase.database();
                const userStatusDatabaseRef = rtdb.ref('/status/' + userId);

                const isOfflineForDatabase = {
                    state: 'offline',
                    last_changed: firebase.database.ServerValue.TIMESTAMP,
                };

                const isOnlineForDatabase = {
                    state: 'online',
                    last_changed: firebase.database.ServerValue.TIMESTAMP,
                };

                rtdb.ref('.info/connected').on('value', function(snapshot) {
                    if (snapshot.val() === false) {
                        return; // Se o usuário não está conectado ao RTDB, não faz nada.
                    }
                    
                    // Se o usuário se desconectar, o RTDB automaticamente o marcará como offline.
                    userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function() {
                        // Se a conexão for bem-sucedida, marca o usuário como online.
                        userStatusDatabaseRef.set(isOnlineForDatabase);
                    });
                });
            };

            const bagTypes = [ { name: 'Leve', capacity: 15 }, { name: 'Média', capacity: 25 }, { name: 'Pesada', capacity: 35 } ];
            let characterAttributes = { 'Força': 10, 'Destreza': 10, 'Constituição': 10, 'Carisma': 10, 'Sabedoria': 10, 'Intelecto': 10, 'Fé': 10 };
            const proficiencies = [ { name: 'Intuição', base: 'Sabedoria' }, { name: 'Percepção', base: 'Sabedoria' }, { name: 'Sobrevivência', base: 'Sabedoria' }, { name: 'Medicina', base: 'Sabedoria' }, { name: 'Resistência Espiritual', base: 'Fé' }, { name: 'Sagrada', base: 'Fé' }, { name: 'História', base: 'Intelecto' }, { name: 'Investigação', base: 'Intelecto' }, { name: 'Natureza', base: 'Intelecto' }, { name: 'Religião', base: 'Intelecto' }, { name: 'Tecnologia', base: 'Intelecto' }, { name: 'Engenharia', base: 'Intelecto' }, { name: 'Atuação', base: 'Carisma' }, { name: 'Mentir', base: 'Carisma' }, { name: 'Intimidação', base: 'Carisma' }, { name: 'Persuasão', base: 'Carisma' }, { name: 'Acrobacia', base: 'Destreza' }, { name: 'Atletismo', base: 'Força' }, { name: 'Furtividade', base: 'Destreza' }, { name: 'Prestidigitação', base: 'Destreza' } ];
            const secretSkills = ['Intuição', 'Percepção', 'Investigação', 'Atuação', 'Mentir', 'Intimidação', 'Persuasão'];
            const placeholderImage = `data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 250" width="200" height="250"><rect width="100%" height="100%" fill="%231a1a1a" /><path d="M100 50 C125 50 140 70 140 95 C140 120 125 140 100 140 C75 140 60 120 60 95 C60 70 75 50 100 50 Z M150 160 C150 180 125 200 100 200 C75 200 50 180 50 160 L150 160 Z" fill="%23333" /><text x="50%" y="90%" font-family="Special Elite, cursive" font-size="20" fill="%23ff0000" text-anchor="middle">SINAL PERDIDO</text></svg>`;
            let equipment = [], spells = [], documents = [], abilities = [], rollHistory = [];
            let status = { hp: {current: 10, max: 10}, san: {current: 10, max: 10}, pe: {current: 10, max: 10} };
            let currentEditingType = null;
            let proficiencyBonuses = {};
            let hasUnsavedChanges = false;
            let chartInstance = null;
            let selectedBagName = 'Leve';
            let selectedArmorType = 'none';

            const selectors = {
                container: document.querySelector('.container'), headerButtons: document.querySelector('.header-buttons'), allModals: document.querySelectorAll('.modal'),
                charName: document.getElementById('char-name'), charStory: document.getElementById('char-story'), charMoney: document.getElementById('char-money'),
                charImage: document.getElementById('char-image'), imageUpload: document.getElementById('image-upload'), attributesList: document.querySelector('.attributes-list'),
                equipmentList: document.getElementById('equipment-list'), spellList: document.getElementById('spell-list'), documentList: document.getElementById('document-list'),
                abilityList: document.getElementById('ability-list'), clearDataBtn: document.getElementById('clear-data-btn'), logoutBtn: document.getElementById('logout-btn'),
                manualSaveBtn: document.getElementById('manual-save-btn'), addItemBtn: document.getElementById('add-item-btn'), addSpellBtn: document.getElementById('add-spell-btn'),
                addAbilityBtn: document.getElementById('add-ability-btn'), addDocumentBtn: document.getElementById('add-document-btn'), shortRestBtn: document.getElementById('short-rest-btn'),
                mediumRestBtn: document.getElementById('medium-rest-btn'), longRestBtn: document.getElementById('long-rest-btn'), itemModal: document.getElementById('item-modal'),
                itemModalTitle: document.getElementById('modal-title'), itemModalForm: document.getElementById('item-modal-form'), itemEditIndex: document.getElementById('item-edit-index'),
                itemNameInput: document.getElementById('item-name-input'), itemDescInput: document.getElementById('item-desc-input'), itemWeightInput: document.getElementById('item-weight-input'),
                itemCostField: document.getElementById('item-cost-field'), itemCostLabel: document.getElementById('item-cost-label'), itemCostInput: document.getElementById('item-cost-input'),
                documentModal: document.getElementById('document-modal'), documentForm: document.getElementById('document-form'), documentModalTitle: document.getElementById('document-modal-title'),
                documentEditIndex: document.getElementById('document-edit-index'), documentTitleInput: document.getElementById('document-title-input'), documentDescInput: document.getElementById('document-desc-input'),
                documentImageInput: document.getElementById('document-image-input'), documentImageLabel: document.getElementById('document-image-label'), documentViewModal: document.getElementById('document-view-modal'),
                openDiceRollerBtn: document.getElementById('open-dice-roller-btn'), diceRollerModal: document.getElementById('dice-roller-modal'), executeRollBtn: document.getElementById('execute-roll-btn'),
                diceResultsList: document.getElementById('dice-results-list'), attributeSelect: document.getElementById('dice-attribute-select'), proficiencySelect: document.getElementById('dice-proficiency-select'),
                attributeSelectField: document.getElementById('attribute-select-field'), proficiencySelectField: document.getElementById('proficiency-select-field'), rollInitiativeBtn: document.getElementById('roll-initiative-btn'),
                statusBarInputs: document.querySelectorAll('.status-input'), hpBar: document.getElementById('hp-bar'), sanBar: document.getElementById('san-bar'),
                peBar: document.getElementById('pe-bar'), weightDisplay: document.getElementById('weight-display'), weightBarFill: document.getElementById('weight-bar-fill'),
                bagSelect: document.getElementById('bag-select'), toastContainer: document.getElementById('toast-container'), attributeChart: document.getElementById('attributeChart'),
                masterMessageModal: document.getElementById('master-message-modal'), masterMessageContent: document.getElementById('master-message-content'), closeMasterMessageBtn: document.getElementById('close-master-message-btn'),
                armorTypeSelect: document.getElementById('armor-type-select'), caDisplay: document.getElementById('ca-display')
            };

            const showToast = (message, isError = false) => { const toast = document.createElement('div'); toast.className = 'toast'; if(isError) toast.style.borderLeftColor = '#c0392b'; toast.textContent = message; if(selectors.toastContainer) selectors.toastContainer.appendChild(toast); setTimeout(() => { toast.classList.add('fade-out'); toast.addEventListener('animationend', () => toast.remove()); }, 3000); };
            const markAsDirty = () => { if (!hasUnsavedChanges) { hasUnsavedChanges = true; selectors.manualSaveBtn.classList.remove('hidden'); } };
            const openModal = (modalElement) => { modalElement.style.display = 'flex'; setTimeout(() => modalElement.classList.add('active'), 10); };
            const closeModal = (modalElement) => { modalElement.classList.remove('active'); setTimeout(() => { if(modalElement) modalElement.style.display = 'none'; }, 300); };
            const getModifier = (value) => Math.floor((Number(value) - 10) / 2);
            const calculateTotalWeight = () => { return equipment.reduce((total, item) => { let itemWeightInKg = parseFloat(item.weight) || 0; if (item.unit === 'g') { itemWeightInKg /= 1000; } return total + itemWeightInKg; }, 0);};
            const updateWeightDisplay = () => { const selectedBag = bagTypes.find(b => b.name === selectedBagName) || bagTypes[0]; const currentWeight = calculateTotalWeight(); const maxWeight = selectedBag.capacity; selectors.weightDisplay.textContent = `${currentWeight.toFixed(2)} kg / ${maxWeight} kg`; const percentage = maxWeight > 0 ? (currentWeight / maxWeight) * 100 : 0; selectors.weightBarFill.style.width = `${Math.min(100, percentage)}%`; selectors.weightBarFill.classList.toggle('overload', currentWeight > maxWeight); };
            const updateCA = () => { const conValue = characterAttributes['Constituição'] || 10; const conModifier = getModifier(conValue); let ca = 10; switch (selectedArmorType) { case 'none': ca = Math.floor(conValue / 2); break; case 'light': ca = 11 + conModifier; break; case 'medium': ca = 15 + Math.floor(conModifier / 2); break; case 'heavy': ca = 18 + conModifier; break; } selectors.caDisplay.textContent = ca; };
            const saveData = () => { const attributesToSave = {}; document.querySelectorAll('.attribute-header input').forEach(input => { attributesToSave[input.dataset.attrName] = Number(input.value); }); const characterData = { name: selectors.charName.value, story: selectors.charStory.value, money: parseFloat(selectors.charMoney.value) || 0, armorType: selectedArmorType, attributes: attributesToSave, proficiencyBonuses, equipment, spells, documents, abilities, rollHistory, characterImage: selectors.charImage.src, status, selectedBag: selectedBagName, lastModified: firebase.firestore.FieldValue.serverTimestamp() }; showToast("Salvando dados no servidor..."); db.collection("fichas").doc(sheetUserId).set({ characterData }, { merge: true }).then(() => { showToast("Dados salvos com sucesso!"); hasUnsavedChanges = false; selectors.manualSaveBtn.classList.add('hidden'); }).catch(error => { console.error("Erro ao salvar no Firestore: ", error); showToast("ERRO AO SALVAR! Verifique a conexão.", true); }); };
            const loadData = async () => { const docRef = db.collection("fichas").doc(sheetUserId); try { const doc = await docRef.get(); if (doc.exists && doc.data().characterData) { const data = doc.data().characterData; selectors.charName.value = data.name || ''; selectors.charStory.value = data.story || ''; selectors.charMoney.value = data.money?.toFixed(2) || '0.00'; if (data.attributes) { characterAttributes = { ...characterAttributes, ...data.attributes }; } proficiencyBonuses = data.proficiencyBonuses || {}; equipment = data.equipment || []; spells = data.spells || []; documents = data.documents || []; abilities = data.abilities || []; rollHistory = data.rollHistory || []; if (data.status) { status = data.status; } if (data.characterImage && data.characterImage !== placeholderImage) { selectors.charImage.src = data.characterImage; } selectedBagName = data.selectedBag || 'Leve'; selectors.bagSelect.value = selectedBagName; selectedArmorType = data.armorType || 'none'; selectors.armorTypeSelect.value = selectedArmorType; } } catch (error) { console.error("Erro ao carregar dados do Firestore:", error); showToast("ERRO: Não foi possível carregar os dados da ficha.", true); } };
            const updateMaxStatusValues = () => { const feValue = Number(characterAttributes['Fé']) || 0; const conValue = Number(characterAttributes['Constituição']) || 0; status.san.max = feValue * 2; status.pe.max = conValue * 2; status.san.current = Math.min(status.san.current, status.san.max); status.pe.current = Math.min(status.pe.current, status.pe.max); document.getElementById('san-max').value = status.san.max; document.getElementById('pe-max').value = status.pe.max; };
            const renderAttributesAndProficiencies = () => { const container = selectors.attributesList; container.innerHTML = ''; Object.entries(characterAttributes).forEach(([attrName, attrValue]) => { const group = document.createElement('div'); group.className = 'attribute-group'; const relatedProficiencies = proficiencies.filter(p => p.base === attrName); const header = document.createElement('div'); header.className = 'attribute-header'; header.innerHTML = `<span>${attrName}</span><input type="number" data-attr-name="${attrName}" value="${attrValue}" min="1" max="30"><i class="fas fa-chevron-down toggle-icon" style="display: ${relatedProficiencies.length > 0 ? 'block' : 'none'}"></i>`; group.appendChild(header); if (relatedProficiencies.length > 0) { const proficienciesContainer = document.createElement('div'); proficienciesContainer.className = 'proficiencies-container'; relatedProficiencies.forEach(prof => { const profItem = document.createElement('div'); profItem.className = 'proficiency-item'; profItem.dataset.profName = prof.name; profItem.innerHTML = `<div><label>${prof.name}</label><span class="base-attr">(${prof.base})</span></div><div class="proficiency-controls"><button class="btn-prof-mod btn-minus" data-action="prof-minus">-</button><input type="text" class="modifier-display" readonly><button class="btn-prof-mod btn-plus" data-action="prof-plus">+</button></div>`; proficienciesContainer.appendChild(profItem); }); group.appendChild(proficienciesContainer); } container.appendChild(group); }); updateProficiencies(); };
            const updateProficiencies = () => { document.querySelectorAll('.proficiency-item').forEach(profItem => { const profName = profItem.dataset.profName; const proficiency = proficiencies.find(p => p.name === profName); if (proficiency) { const attributeModifier = getModifier(characterAttributes[proficiency.base]); const manualBonus = Number(proficiencyBonuses[profName] || 0); const totalModifier = attributeModifier + manualBonus; const displayInput = profItem.querySelector('.modifier-display'); displayInput.dataset.realValue = totalModifier; if (!isAdmin && secretSkills.includes(profName)) { displayInput.value = '???'; displayInput.style.color = 'var(--delete-color)'; } else { displayInput.value = `${totalModifier >= 0 ? '+' : ''}${totalModifier}`; displayInput.style.color = ''; } } }); };
            const renderDetailedList = (container, items, emptyMessage, type) => { container.innerHTML = ''; if (items.length === 0) { container.innerHTML = `<div class="empty-state">${emptyMessage}</div>`; return; } items.forEach((item, index) => { const itemEl = document.createElement('div'); itemEl.classList.add('detailed-item'); const useButton = (item.cost && (type === 'spell' || type === 'ability')) ? `<button class="btn-action use" data-action="use" data-type="${type}" data-index="${index}"><i class="fas fa-magic"></i> Usar</button>` : ''; const weightInfo = (type === 'item') ? `<div class="item-weight">${item.weight || 0} ${item.unit || 'kg'}</div>` : ''; const hasDescription = item.description && item.description.trim() !== ''; itemEl.innerHTML = ` <h4 ${hasDescription ? 'data-action="toggle-desc"' : ''}> ${item.name} ${hasDescription ? '<i class="fas fa-chevron-down toggle-desc-icon"></i>' : ''} </h4> <div class="item-cost">${item.cost || ''}</div> ${weightInfo} <p class="item-description ${hasDescription ? 'collapsed' : ''}">${item.description || 'Sem descrição.'}</p> <div class="item-actions"> ${useButton} <button class="btn-action edit" data-action="edit" data-type="${type}" data-index="${index}"><i class="fas fa-pencil-alt"></i> Editar</button> <button class="btn-action delete" data-action="delete" data-type="${type}" data-index="${index}"><i class="fas fa-trash-alt"></i> Excluir</button> </div> `; if (itemEl.querySelector('.item-cost') && !item.cost) { itemEl.querySelector('.item-cost').style.display = 'none'; } if (!hasDescription) { itemEl.querySelector('.item-description').style.display = 'none'; } container.appendChild(itemEl); }); };
            const renderDocuments = () => { selectors.documentList.innerHTML = ''; if (documents.length === 0) { selectors.documentList.innerHTML = `<div class="empty-state">[ NENHUM DOCUMENTO ARQUIVADO ]</div>`; return; } documents.forEach((doc, index) => { const docEl = document.createElement('div'); docEl.classList.add('document-item'); docEl.innerHTML = `<div class="document-item-image" data-action="view-doc" data-index="${index}"><img src="${doc.imageSrc || placeholderImage}" alt="${doc.title}"></div><div class="document-item-content"><h4 data-action="view-doc" data-index="${index}">${doc.title}</h4><p>${doc.description}</p><div class="document-item-actions"><button class="btn-action edit" data-action="edit" data-type="document" data-index="${index}"><i class="fas fa-pencil-alt"></i> Editar</button><button class="btn-action delete" data-action="delete" data-type="document" data-index="${index}"><i class="fas fa-trash-alt"></i> Excluir</button></div></div>`; selectors.documentList.appendChild(docEl); }); };
            const renderRollHistory = () => { const list = selectors.diceResultsList; list.innerHTML = ''; if(rollHistory.length === 0) { list.innerHTML = '<div class="empty-state" style="color: #888;">[ NENHUMA ROLAGEM NO HISTÓRICO ]</div>'; return; } rollHistory.forEach(entry => { const historyEl = document.createElement('div'); historyEl.classList.add('dice-history-item'); historyEl.innerHTML = `<span class="timestamp">[${entry.timestamp}]</span><span class="result-title">${entry.title}</span>${entry.lines.map(line => `<span class="result-line">${line}</span>`).join('')}`; list.appendChild(historyEl); }); };
            const updateChart = (chart) => { if (!chart) return; const currentValues = Object.values(characterAttributes); chart.data.datasets[0].data = currentValues; chart.update(); };
            const updateStatusBars = () => { const updateBar = (type) => { const current = status[type].current; const max = status[type].max; const percentage = max > 0 ? (current / max) * 100 : 0; selectors[`${type}Bar`].style.width = `${Math.max(0, Math.min(100, percentage))}%`; document.getElementById(`${type}-current`).value = current; document.getElementById(`${type}-max`).value = max; }; ['hp', 'san', 'pe'].forEach(updateBar); };
            const renderAllLists = () => { renderDetailedList(selectors.equipmentList, equipment, '[ NENHUM ITEM REGISTRADO ]', 'item'); renderDetailedList(selectors.spellList, spells, '[ NENHUM RITUAL MEMORIZADO ]', 'spell'); renderDetailedList(selectors.abilityList, abilities, '[ NENHUMA HABILIDADE ADQUIRIDA ]', 'ability'); renderDocuments(); };
            const handleRest = (multiplier, type) => { if (type === 'longo') { status.san.current = status.san.max; status.pe.current = status.pe.max; } else { const sanToRecover = Math.floor(status.san.max * multiplier); const peToRecover = Math.floor(status.pe.max * multiplier); status.san.current = Math.min(status.san.current + sanToRecover, status.san.max); status.pe.current = Math.min(status.pe.current + peToRecover, status.pe.max); } updateStatusBars(); markAsDirty(); };
            const openCreateModal = (type) => { currentEditingType = type; const config = { item: { title: 'Adicionar Novo Item' }, spell: { title: 'Adicionar Novo Ritual' }, ability: { title: 'Adicionar Nova Habilidade' } }; const currentConfig = config[type]; selectors.itemModalForm.reset(); selectors.itemEditIndex.value = ''; selectors.itemModalTitle.textContent = currentConfig.title; const showCost = (type === 'spell' || type === 'ability'); selectors.itemCostField.style.display = showCost ? 'block' : 'none'; selectors.itemCostLabel.textContent = (type === 'spell') ? 'Custo de Sacrata:' : 'Custo de Vigor:'; const showWeight = (type === 'item'); selectors.itemWeightInput.closest('.editable-field').style.display = showWeight ? 'block' : 'none'; openModal(selectors.itemModal); };
            const openEditModal = (type, index) => { currentEditingType = type; const collections = { item: equipment, spell: spells, ability: abilities, document: documents }; const itemData = collections[type][index]; if (!itemData) return; if(type === 'document'){ selectors.documentForm.reset(); selectors.documentModalTitle.textContent = "Editar Documento"; selectors.documentEditIndex.value = index; selectors.documentTitleInput.value = itemData.title; selectors.documentDescInput.value = itemData.description; selectors.documentImageLabel.textContent = "Trocar Imagem (Opcional)"; openModal(selectors.documentModal); } else { openCreateModal(type); selectors.itemModalTitle.textContent = `Editar ${type.charAt(0).toUpperCase() + type.slice(1)}`; selectors.itemEditIndex.value = index; selectors.itemNameInput.value = itemData.name; selectors.itemDescInput.value = itemData.description; if (type === 'item') { selectors.itemWeightInput.value = itemData.weight || 0; document.getElementById(`unit-${itemData.unit || 'kg'}`).checked = true; } if (itemData.cost) { selectors.itemCostInput.value = itemData.cost; } } };
            const addRollToHistory = (title, lines) => { const timestamp = new Date().toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', second: '2-digit' }); rollHistory.unshift({ timestamp: timestamp, title: title, lines: lines }); if (rollHistory.length > 10) { rollHistory.pop(); } const characterName = document.getElementById('char-name').value || 'Agente Desconhecido'; db.collection('rolagens_globais').add({ characterName: characterName, characterId: sheetUserId, rollType: title, rollString: lines.join('\n'), timestamp: firebase.firestore.FieldValue.serverTimestamp() }).catch(error => console.error("Erro ao transmitir rolagem:", error)); markAsDirty(); renderRollHistory(); };
            const setupMessageListener = (userId) => { db.collection('messages').where('targetUserId', '==', userId).orderBy('createdAt', 'desc').limit(1).onSnapshot(snapshot => { if (!snapshot.empty) { const messageDoc = snapshot.docs[0]; const messageData = messageDoc.data(); selectors.masterMessageContent.textContent = messageData.message; openModal(selectors.masterMessageModal); db.collection('messages').doc(messageDoc.id).delete(); } }); };
            
            const setupEventListeners = () => {
                if (isAdmin) { const backBtn = document.createElement('button'); backBtn.id = 'back-to-dashboard-btn'; backBtn.className = 'btn-clear'; backBtn.innerHTML = `<i class="fas fa-arrow-left"></i> Painel`; selectors.headerButtons.insertBefore(backBtn, selectors.clearDataBtn); backBtn.addEventListener('click', () => { if(hasUnsavedChanges && !confirm("Você tem alterações não salvas. Deseja sair mesmo assim?")) return; window.location.href = './dashboard.html'; }); }
                selectors.charName.addEventListener('input', markAsDirty); selectors.charStory.addEventListener('input', markAsDirty); selectors.charMoney.addEventListener('input', markAsDirty);
                selectors.armorTypeSelect.addEventListener('change', () => { selectedArmorType = selectors.armorTypeSelect.value; updateCA(); markAsDirty(); });
                selectors.attributesList.addEventListener('input', (e) => { if (e.target.matches('input[data-attr-name]')) { const attrName = e.target.dataset.attrName; characterAttributes[attrName] = Number(e.target.value); updateMaxStatusValues(); updateStatusBars(); updateChart(chartInstance); updateProficiencies(); if (attrName === 'Constituição') { updateCA(); } markAsDirty(); } });
                selectors.bagSelect.addEventListener('change', () => { selectedBagName = selectors.bagSelect.value; updateWeightDisplay(); markAsDirty(); });
                selectors.statusBarInputs.forEach(input => { input.addEventListener('input', () => { if (input.hasAttribute('readonly')) return; status.hp.current = parseInt(document.getElementById('hp-current').value, 10) || 0; status.hp.max = parseInt(document.getElementById('hp-max').value, 10) || 0; status.san.current = parseInt(document.getElementById('san-current').value, 10) || 0; status.pe.current = parseInt(document.getElementById('pe-current').value, 10) || 0; updateStatusBars(); markAsDirty(); }); });
                selectors.attributesList.addEventListener('click', (e) => { const target = e.target; const header = target.closest('.attribute-header'); if (header && !target.matches('input')) { const container = header.nextElementSibling; if (container) { container.classList.toggle('active'); header.querySelector('.toggle-icon').classList.toggle('rotated'); } return; } const action = target.dataset.action; if (action === 'prof-plus' || action === 'prof-minus') { const profItem = target.closest('.proficiency-item'); const profName = profItem.dataset.profName; let bonus = Number(proficiencyBonuses[profName] || 0); proficiencyBonuses[profName] = (action === 'prof-plus') ? bonus + 1 : bonus - 1; updateProficiencies(); markAsDirty(); } });
                selectors.manualSaveBtn.addEventListener('click', saveData);
                window.addEventListener('beforeunload', (event) => { if (hasUnsavedChanges) { event.preventDefault(); event.returnValue = ''; } });
                selectors.imageUpload.addEventListener('change', (event) => { const file = event.target.files[0]; if (file && file.type.startsWith('image/')) { const reader = new FileReader(); reader.onload = (e) => { selectors.charImage.src = e.target.result; markAsDirty(); }; reader.readAsDataURL(file); } });
                selectors.addItemBtn.addEventListener('click', () => openCreateModal('item'));
                selectors.addSpellBtn.addEventListener('click', () => openCreateModal('spell'));
                selectors.addAbilityBtn.addEventListener('click', () => openCreateModal('ability'));
                selectors.addDocumentBtn.addEventListener('click', () => { selectors.documentForm.reset(); selectors.documentModalTitle.textContent = "Adicionar Novo Documento"; selectors.documentEditIndex.value = ''; selectors.documentImageLabel.textContent = "Imagem do Documento"; openModal(selectors.documentModal); });
                selectors.shortRestBtn.addEventListener('click', () => handleRest(0.25, 'curto'));
                selectors.mediumRestBtn.addEventListener('click', () => handleRest(0.5, 'médio'));
                selectors.longRestBtn.addEventListener('click', () => handleRest(1, 'longo'));
                selectors.itemModalForm.addEventListener('submit', (e) => { e.preventDefault(); const name = selectors.itemNameInput.value.trim(); if (name === '') return showToast('O nome não pode estar vazio!', true); const weight = parseFloat(selectors.itemWeightInput.value) || 0; const unit = document.querySelector('input[name="weight-unit"]:checked').value; const newItemWeightInKg = (unit === 'g') ? weight / 1000 : weight; const currentTotalWeight = calculateTotalWeight(); const selectedBag = bagTypes.find(b => b.name === selectedBagName) || bagTypes[0]; const maxCapacity = selectedBag.capacity; const editIndex = selectors.itemEditIndex.value; let oldItemWeightInKg = 0; if (editIndex !== '') { const oldItem = equipment[editIndex]; if (oldItem && oldItem.weight) { oldItemWeightInKg = (oldItem.unit === 'g') ? (parseFloat(oldItem.weight) / 1000) : parseFloat(oldItem.weight); } } if ((currentTotalWeight - oldItemWeightInKg + newItemWeightInKg) > maxCapacity) { showToast(`Carga excedida! A bolsa de ${selectedBag.name} suporta no máximo ${maxCapacity}kg.`, true); return; } const data = { name, description: selectors.itemDescInput.value.trim(), cost: selectors.itemCostInput.value.trim(), weight, unit }; if (currentEditingType === 'item') { if (editIndex !== '') { equipment[editIndex] = data; } else { equipment.push(data); } } else if (currentEditingType === 'spell') { if (editIndex !== '') { spells[editIndex] = data; } else { spells.push(data); } } else if (currentEditingType === 'ability') { if (editIndex !== '') { abilities[editIndex] = data; } else { abilities.push(data); } } renderAllLists(); updateWeightDisplay(); closeModal(selectors.itemModal); markAsDirty(); });
                selectors.documentForm.addEventListener('submit', (e) => { e.preventDefault(); const title = selectors.documentTitleInput.value.trim(); if (title === '') return showToast('O título não pode estar vazio!', true); const editIndex = selectors.documentEditIndex.value; const file = selectors.documentImageInput.files[0]; const processSubmit = (imageSrc) => { const docData = { title, description: selectors.documentDescInput.value.trim(), imageSrc: imageSrc }; if (editIndex !== '') { if (!docData.imageSrc) { docData.imageSrc = documents[editIndex].imageSrc; } documents[editIndex] = docData; } else { if (!docData.imageSrc) docData.imageSrc = placeholderImage; documents.push(docData); } renderDocuments(); closeModal(selectors.documentModal); markAsDirty(); }; if(file) { const reader = new FileReader(); reader.onload = (event) => processSubmit(event.target.result); reader.readAsDataURL(file); } else { processSubmit(editIndex !== '' ? documents[editIndex].imageSrc : null); } });
                selectors.container.addEventListener('click', (e) => { const target = e.target.closest('[data-action]'); if (!target) return; const { action, type, index } = target.dataset; const collections = { item: equipment, spell: spells, ability: abilities, document: documents }; if (action === 'delete') { const collection = collections[type]; if (!collection) return; const itemName = collection[index]?.name || collection[index]?.title; if (confirm(`Tem certeza que deseja excluir "${itemName}"?`)) { collection.splice(index, 1); renderAllLists(); if (type === 'item') updateWeightDisplay(); markAsDirty(); } } else if (action === 'edit') { openEditModal(type, index); } else if (action === 'view-doc') { const docData = documents[index]; document.getElementById('document-view-image').src = docData.imageSrc; document.getElementById('document-view-title').textContent = docData.title; document.getElementById('document-view-desc').textContent = docData.description; openModal(selectors.documentViewModal); } else if (action === 'use') { const collection = (type === 'ability') ? abilities : spells; const item = collection[index]; if (!item || !item.cost) return; const cost = parseInt(item.cost); if (isNaN(cost)) return showToast(`Custo inválido para '${item.name}'.`, true); const resourceMap = { ability: { key: 'pe', name: 'Vigor' }, spell: { key: 'san', name: 'Sacrata' } }; const resource = resourceMap[type]; if (status[resource.key].current >= cost) { status[resource.key].current -= cost; updateStatusBars(); markAsDirty(); showToast(`'${item.name}' ativado! Custo: ${cost} de ${resource.name}.`); } else { showToast(`Recursos insuficientes para usar '${item.name}'.`, true); } } else if (action === 'toggle-desc') { const header = target.closest('h4'); const itemEl = header.closest('.detailed-item'); const description = itemEl.querySelector('.item-description'); const icon = header.querySelector('.toggle-desc-icon'); if (description) { description.classList.toggle('collapsed'); } if (icon) { icon.classList.toggle('rotated'); } } });
                selectors.openDiceRollerBtn.addEventListener('click', () => { const populateDiceRollerSelects = () => { selectors.attributeSelect.innerHTML = ''; selectors.proficiencySelect.innerHTML = ''; Object.keys(characterAttributes).forEach(attr => { const option = document.createElement('option'); option.value = attr; option.textContent = attr; selectors.attributeSelect.appendChild(option); }); proficiencies.forEach(p => { const option = document.createElement('option'); option.value = p.name; option.textContent = p.name; selectors.proficiencySelect.appendChild(option); }); }; populateDiceRollerSelects(); renderRollHistory(); openModal(selectors.diceRollerModal); });
                selectors.diceRollerModal.addEventListener('change', (e) => { if (e.target.name === 'roll-type') { const rollType = e.target.value; if(rollType === 'proficiency') { selectors.proficiencySelectField.style.display = 'block'; selectors.attributeSelectField.style.display = 'none'; } else { selectors.proficiencySelectField.style.display = 'none'; selectors.attributeSelectField.style.display = (rollType === 'attribute') ? 'block' : 'none'; } } });
                selectors.executeRollBtn.addEventListener('click', () => { const rollType = document.querySelector('input[name="roll-type"]:checked').value; const diceCount = parseInt(document.getElementById('dice-roller-count').value, 10) || 1; const dieType = parseInt(document.getElementById('dice-type-select').value, 10); let modifier = 0; let modifierText = ""; let title; if (rollType === 'proficiency') { const selectedProfName = selectors.proficiencySelect.value; const profItem = document.querySelector(`.proficiency-item[data-prof-name="${selectedProfName}"]`); modifier = profItem ? parseInt(profItem.querySelector('.modifier-display').dataset.realValue, 10) : 0; modifierText = ` com ${selectedProfName}`; if (!isAdmin && secretSkills.includes(selectedProfName)) { alert("O resultado desta rolagem é secreto e será revelado apenas pelo Mestre para manter a imersão e o suspense da investigação. O destino aguarda sua narração."); const secretRoll = Math.floor(Math.random() * 20) + 1; const secretTotal = secretRoll + modifier; const secretTitle = `Rolagem Secreta de ${selectedProfName}`; const secretLines = [`Resultado (Oculto): <span class="dice-value">🎲 ${secretRoll}</span> + ${modifier} = <span class="final-total">${secretTotal}</span>`]; const characterName = document.getElementById('char-name').value || 'Agente Desconhecido'; db.collection('rolagens_globais').add({ characterName: characterName, characterId: sheetUserId, rollType: secretTitle, rollString: secretLines.join('\n'), timestamp: firebase.firestore.FieldValue.serverTimestamp() }); showToast("Rolagem secreta enviada ao Mestre."); return; } } else if (rollType === 'attribute') { const selectedAttrName = selectors.attributeSelect.value; const attrValue = Number(document.querySelector(`input[data-attr-name="${selectedAttrName}"]`).value) || 0; modifier = getModifier(attrValue); modifierText = ` com ${selectedAttrName}`; } title = `Rolando ${diceCount}d${dieType}${modifierText} (Mod: ${modifier >= 0 ? '+' : ''}${modifier})`; let lines = []; let totalSum = 0; for (let i = 1; i <= diceCount; i++) { const roll = Math.floor(Math.random() * dieType) + 1; totalSum += roll; lines.push(`Rolagem ${i}: <span class="dice-value">🎲 ${roll}</span>`); } if (diceCount > 1) { lines.push(`Soma: ${totalSum} + ${modifier} = <span class="final-total">${totalSum + modifier}</span>`); } else { lines[0] += ` + ${modifier} = <span class="final-total">${totalSum + modifier}</span>` } addRollToHistory(title, lines); });
                selectors.rollInitiativeBtn.addEventListener('click', () => { const dexValue = Number(document.querySelector('input[data-attr-name="Destreza"]').value) || 0; const dexModifier = getModifier(dexValue); const roll = Math.floor(Math.random() * 20) + 1; const total = roll + dexModifier; const title = `Rolagem de Iniciativa`; const lines = [`Resultado: <span class="dice-value">🎲 ${roll}</span> + ${dexModifier} (Mod. Des) = <span class="final-total">${total}</span>`]; addRollToHistory(title, lines); });
                selectors.clearDataBtn.addEventListener('click', () => { if (confirm("Você tem certeza? Todos os dados DESTA FICHA serão permanentemente apagados.")) { db.collection("fichas").doc(sheetUserId).update({ characterData: {} }).then(() => { showToast("Dados da ficha resetados."); location.reload(); }).catch(err => console.error(err)); } });
                if (selectors.logoutBtn) { selectors.logoutBtn.addEventListener('click', () => { if(hasUnsavedChanges && !confirm("Você tem alterações não salvas. Deseja sair mesmo assim?")) return; firebase.auth().signOut().then(() => { sessionStorage.clear(); window.location.href = './login.html'; }); }); }
                selectors.allModals.forEach(modal => { modal.addEventListener('click', (e) => { if (e.target === modal || e.target.closest('.close-btn')) closeModal(modal); }); });
                selectors.closeMasterMessageBtn.addEventListener('click', () => { closeModal(selectors.masterMessageModal); });
            };

            async function init() {
                await loadData();
                chartInstance = new Chart(selectors.attributeChart.getContext('2d'), { type: 'pie', data: { labels: Object.keys(characterAttributes), datasets: [{ data: Object.values(characterAttributes), backgroundColor: [ 'rgba(192, 57, 43, 0.7)', 'rgba(41, 128, 185, 0.7)', 'rgba(39, 174, 96, 0.7)', 'rgba(241, 196, 15, 0.7)', 'rgba(142, 68, 173, 0.7)', 'rgba(233, 30, 99, 0.7)', 'rgba(236, 240, 241, 0.7)' ], borderColor: [ '#c0392b', '#2980b9', '#27ae60', '#f1c40f', '#8e44ad', '#e91e63', '#ecf0f1' ], borderWidth: 2, hoverBorderColor: '#ffffff', hoverBorderWidth: 3 }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false }, tooltip: { callbacks: { label: (context) => { const label = context.label || ''; const value = context.raw || 0; const modifier = getModifier(value); return `${label}: ${value} (Mod: ${modifier >= 0 ? '+' : ''}${modifier})`; } } } } } });
                renderAttributesAndProficiencies();
                updateMaxStatusValues();
                renderAllLists();
                updateChart(chartInstance);
                updateStatusBars();
                setupEventListeners();
                updateWeightDisplay();
                updateCA();
                
                if (!isAdmin) {
                    setupMessageListener(sheetUserId);
                    setupRealtimePresence(sheetUserId); // Inicia a presença em tempo real
                }
            }

            init();

        } else {
            sessionStorage.clear();
            window.location.href = './login.html';
        }
    });
});